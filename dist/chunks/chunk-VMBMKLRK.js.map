{
  "version": 3,
  "sources": ["../../src/editor/extensions/Image.js"],
  "sourcesContent": ["import { html, render } from 'lit';\nimport { mergeAttributes, Node } from '@tiptap/core'\nimport { Plugin, PluginKey } from \"@tiptap/pm/state\";\nimport { Decoration, DecorationSet } from '@tiptap/pm/view';\nimport { ActiveStorageUploader } from '../ActiveStorageUploader';\n\nexport const uploadFile = (file, handleComplete) => {\n  const handleProgress = () => {};\n  const handleFailure = () => { console.log(\"Failed to upload attachment\"); };\n\n  const uploader = new ActiveStorageUploader(\n    file,\n    handleProgress,\n    handleComplete,\n    handleFailure\n  )\n\n  uploader.start()\n}\n\n//Find the placeholder in editor\nfunction findPlaceholder(state, id) {\n  let decos = placeholderPlugin.getState(state)\n  let found = decos.find(null, null, spec => spec.id == id)\n  return found.length ? found[0].from : null\n}\n\n\nexport default Node.create({\n  name: 'image',\n  group: 'block',\n  draggable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n      },\n      alt: {\n        default: null,\n      },\n      signedId: {\n        default: null,\n      },\n      width: {\n        default: \"100%\",\n        parseHTML: (element) =>\n          element.style.width.includes(\"%\") ? element.style.width : \"100%\",\n      }\n    };\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\"img\", mergeAttributes(HTMLAttributes)];\n  },\n\n  parseHTML() {\n    return [{ tag: \"img\" }];\n  },\n\n  addStorage() {\n    return {\n      uploads: [],\n    };\n  },\n\n  addCommands() {\n    return {\n      // attachImage: ({ signedId, fileName}) => ({ commands }) => {\n      //   const url = `/rails/active_storage/blobs/redirect/${signedId}/${fileName}`;\n\n      //   return commands.insertContent({ type: this.name, attrs: { src: url, alt: fileName, signedId: signedId }})\n      // },\n      setImageWidth: (width) => ({ commands }) => {\n        return commands.updateAttributes(this.name, { width });\n      },\n    };\n  },\n\n  addNodeView() {\n    return ({ node, getPos, editor }) => {\n      const { signedId, alt, url, src, width } = node.attrs;\n\n      const template = html`\n        <div style=\"width: ${width}\">\n          <img src=\"${src}\" alt=\"${alt}\" data-drag-handle />\n        </div>\n      `;\n\n      // Scratch element to render into.\n      const scratch = document.createElement(\"div\");\n      render(template, scratch);\n\n      const dom = scratch.firstElementChild;\n\n      let srcRevoked = false;\n\n      return {\n        dom,\n        update(node) {\n          if (node.type.name !== \"image\") return false;\n\n          if (!srcRevoked && node.attrs.url) {\n            srcRevoked = true;\n            try {\n              URL.revokeObjectURL(node.attrs.src);\n            } catch (_e) {\n              /* We don't really care if this fails. An attempt was made. \uD83E\uDD37\u200D\u2640\uFE0F */\n            }\n          }\n\n          return false;\n        },\n      };\n    };\n  },\n\n  addProseMirrorPlugins() {\n    const { editor } = this;\n    const { schema }  = editor;\n\n    return [\n      placeholderPlugin,\n      new Plugin({\n        key: new PluginKey('image'),\n        props: {\n          handlePaste: (view, event) => {\n            event.preventDefault();\n\n            const images = Array.from(event.clipboardData.files).filter((file) => {\n              return file.type.startsWith('image/');\n            });\n\n            Array.from(images).forEach((image) => {\n              // A fresh object to act as the ID for this upload\n              let id = {};\n\n              // Replace the selection with a placeholder\n              let tr = view.state.tr;\n              if (!tr.selection.empty) tr.deleteSelection();\n\n              tr.setMeta(placeholderPlugin, {add: {id, pos: tr.selection.from}, image: image});\n              view.dispatch(tr)\n\n              const onUploadComplete = (attrs, completedUpload) => {\n                const payload = {\n                  signedId: attrs.signedId,\n                  name: completedUpload.file.name,\n                  src: `/rails/active_storage/blobs/redirect/${attrs.signedId}/${completedUpload.file.name}`,\n                  alt: completedUpload.file.name,\n                };\n\n                view.dispatch(\n                  view.state.tr.replaceWith(view.state.history$.prevRanges[0], view.state.history$.prevRanges[1], schema.nodes.image.create(payload))\n                    .setMeta(placeholderPlugin, {remove: {id}})\n                )\n              }\n\n              uploadFile(image, onUploadComplete);\n\n            });\n          },\n          handleDrop: (view, event, _sliced, _moved) => {\n            event.preventDefault();\n            const images = Array.from(event.dataTransfer.files).filter((file) => {\n              return file.type.startsWith('image/');\n            });\n\n            Array.from(images).forEach((image) => {\n              const coordinates = view.posAtCoords({\n                left: event.clientX,\n                top: event.clientY,\n              });\n\n              // A fresh object to act as the ID for this upload\n              let id = {};\n\n              // Replace the selection with a placeholder\n              let tr = view.state.tr;\n              if (!tr.selection.empty) tr.deleteSelection();\n\n              tr.setMeta(placeholderPlugin, {add: {id, pos: coordinates.pos}, image: image})\n              view.dispatch(tr)\n\n              const onUploadComplete = (attrs, completedUpload) => {\n                  let pos = findPlaceholder(\n                    view.state,\n                    id\n                  );\n                  if (pos == null) return;\n\n                  const payload = {\n                    signedId: attrs.signedId,\n                    name: completedUpload.file.name,\n                    src: `/rails/active_storage/blobs/redirect/${attrs.signedId}/${completedUpload.file.name}`,\n                    alt: completedUpload.file.name,\n                  };\n\n                  view.dispatch(\n                    view.state.tr.replaceWith(pos, pos, schema.nodes.image.create(payload))\n                      .setMeta(placeholderPlugin, {remove: {id}})\n                  )\n                }\n\n                uploadFile(image, onUploadComplete)\n            });\n          },\n        },\n      }),\n    ];\n  },\n});\n\nlet placeholderPlugin = new Plugin({\n  state: {\n    init() { return DecorationSet.empty },\n    apply(tr, set) {\n      // Adjust decoration positions to changes made by the transaction\n      set = set.map(tr.mapping, tr.doc)\n      // See if the transaction adds or removes any placeholders\n      let action = tr.getMeta(this)\n      if (action && action.add) {\n        let widget = document.createElement(\"div\")\n        let img = document.createElement('img');\n        widget.classList = \"image-uploading\";\n        img.src = URL.createObjectURL(action.image);\n        widget.appendChild(img);\n        let deco = Decoration.widget(action.add.pos, widget, {id: action.add.id})\n        set = set.add(tr.doc, [deco])\n      } else if (action && action.remove) {\n        set = set.remove(set.find(null, null,\n                                    spec => spec.id == action.remove.id))\n      }\n      return set\n      }\n    },\n    props: {\n      decorations(state) { return this.getState(state) }\n    }\n});\n"],
  "mappings": "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",
  "names": ["node"]
}
