{
  "version": 3,
  "sources": ["../../src/editor/extensions/Emoji.js"],
  "sourcesContent": ["import { Extension } from \"@tiptap/core\";\nimport Suggestion from \"@tiptap/suggestion\";\nimport tippy from \"tippy.js\";\nimport { PluginKey } from \"@tiptap/pm/state\";\n\nimport \"../elements/EmojiList\";\n\nimport data from \"@emoji-mart/data\";\n\nimport { init, SearchIndex } from 'emoji-mart';\n\nconst Emoji = Extension.create({\n  name: \"emoji\",\n\n  addOptions: {\n    suggestion: {\n      char: \":\",\n      startOfLine: false,\n      allowSpaces: false,\n      items: async ({ query }) => {\n        init({data});\n        let emojisList = await SearchIndex.search(query);\n\n        if (emojisList === null) {\n          return [];\n        } else {\n          return emojisList.slice(0, 10);\n        }\n      },\n\n      render: () => {\n        let component;\n        let popup;\n\n        return {\n          onStart: props => {\n            component = document.createElement('richer-text-emoji-list');\n            component.items = props.items;\n            component.command = props.command;\n\n            if (!props.clientRect) {\n              return;\n            }\n            popup = tippy('body', {\n              getReferenceClientRect: props.clientRect,\n              appendTo: () => document.body,\n              content: component,\n              showOnCreate: true,\n              interactive: true,\n              trigger: 'manual',\n              placement: 'bottom-start',\n            });\n          },\n\n          onUpdate(props) {\n            component.items = props.items;\n            component.command = props.command;\n            if (!props.clientRect) {\n              return\n            }\n\n            popup[0].setProps({\n              getReferenceClientRect: props.clientRect,\n            })\n          },\n\n          onKeyDown(props) {\n            if (props.event.key === 'Escape') {\n              popup[0].hide()\n              return true\n            }\n            return component.onKeyDown(props)\n          },\n\n          onExit() {\n            popup[0].destroy();\n          },\n        }\n      },\n      command: ({ editor, range, props }) => {\n        editor.chain().focus().deleteRange(range).insertContentAt(range.from, props.skins[0].native).run();\n      },\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      Suggestion({\n        pluginKey: new PluginKey(\"emojiPluginKey\"),\n        editor: this.editor,\n        ...this.options.suggestion,\n      }),\n    ];\n  },\n});\n\nexport default Emoji;\n"],
  "mappings": ";AAAA,SAAS,iBAAiB;AAC1B,OAAO,gBAAgB;AACvB,OAAO,WAAW;AAClB,SAAS,iBAAiB;AAI1B,OAAO,UAAU;AAEjB,SAAS,MAAM,mBAAmB;AAElC,IAAM,QAAQ,UAAU,OAAO;AAAA,EAC7B,MAAM;AAAA,EAEN,YAAY;AAAA,IACV,YAAY;AAAA,MACV,MAAM;AAAA,MACN,aAAa;AAAA,MACb,aAAa;AAAA,MACb,OAAO,OAAO,EAAE,MAAM,MAAM;AAC1B,aAAK,EAAC,KAAI,CAAC;AACX,YAAI,aAAa,MAAM,YAAY,OAAO,KAAK;AAE/C,YAAI,eAAe,MAAM;AACvB,iBAAO,CAAC;AAAA,QACV,OAAO;AACL,iBAAO,WAAW,MAAM,GAAG,EAAE;AAAA,QAC/B;AAAA,MACF;AAAA,MAEA,QAAQ,MAAM;AACZ,YAAI;AACJ,YAAI;AAEJ,eAAO;AAAA,UACL,SAAS,WAAS;AAChB,wBAAY,SAAS,cAAc,wBAAwB;AAC3D,sBAAU,QAAQ,MAAM;AACxB,sBAAU,UAAU,MAAM;AAE1B,gBAAI,CAAC,MAAM,YAAY;AACrB;AAAA,YACF;AACA,oBAAQ,MAAM,QAAQ;AAAA,cACpB,wBAAwB,MAAM;AAAA,cAC9B,UAAU,MAAM,SAAS;AAAA,cACzB,SAAS;AAAA,cACT,cAAc;AAAA,cACd,aAAa;AAAA,cACb,SAAS;AAAA,cACT,WAAW;AAAA,YACb,CAAC;AAAA,UACH;AAAA,UAEA,SAAS,OAAO;AACd,sBAAU,QAAQ,MAAM;AACxB,sBAAU,UAAU,MAAM;AAC1B,gBAAI,CAAC,MAAM,YAAY;AACrB;AAAA,YACF;AAEA,kBAAM,CAAC,EAAE,SAAS;AAAA,cAChB,wBAAwB,MAAM;AAAA,YAChC,CAAC;AAAA,UACH;AAAA,UAEA,UAAU,OAAO;AACf,gBAAI,MAAM,MAAM,QAAQ,UAAU;AAChC,oBAAM,CAAC,EAAE,KAAK;AACd,qBAAO;AAAA,YACT;AACA,mBAAO,UAAU,UAAU,KAAK;AAAA,UAClC;AAAA,UAEA,SAAS;AACP,kBAAM,CAAC,EAAE,QAAQ;AAAA,UACnB;AAAA,QACF;AAAA,MACF;AAAA,MACA,SAAS,CAAC,EAAE,QAAQ,OAAO,MAAM,MAAM;AACrC,eAAO,MAAM,EAAE,MAAM,EAAE,YAAY,KAAK,EAAE,gBAAgB,MAAM,MAAM,MAAM,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI;AAAA,MACnG;AAAA,IACF;AAAA,EACF;AAAA,EAEA,wBAAwB;AACtB,WAAO;AAAA,MACL,WAAW;AAAA,QACT,WAAW,IAAI,UAAU,gBAAgB;AAAA,QACzC,QAAQ,KAAK;AAAA,QACb,GAAG,KAAK,QAAQ;AAAA,MAClB,CAAC;AAAA,IACH;AAAA,EACF;AACF,CAAC;AAED,IAAO,gBAAQ;",
  "names": []
}
