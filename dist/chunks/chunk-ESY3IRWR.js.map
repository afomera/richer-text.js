{
  "version": 3,
  "sources": ["../../src/editor/suggestions/CustomSuggestionSuggestion.js"],
  "sourcesContent": ["import { PluginKey } from \"@tiptap/pm/state\"\nimport tippy from \"tippy.js\";\nimport \"../elements/CustomSuggestionList\";\n\nconst CustomSuggestionSuggestion = (endpointPath, trigger, pluginKey) => {\n  return {\n    char: trigger,\n    pluginKey: new PluginKey(pluginKey),\n    items: async ({ query }) => {\n      if (!endpointPath) {\n        return []\n      }\n\n      const url = new URL(endpointPath, window.location.origin);\n\n      if (query) {\n        url.searchParams.set(\"query\", query);\n      }\n\n      const response = await fetch(url)\n      const data = await response.json()\n\n      return data\n        .filter((user) => {\n          return (\n            user.label.toLowerCase().includes(query.toLowerCase())\n          );\n        })\n        .slice(0, 10)\n    },\n\n    render: () => {\n      let component;\n      let popup;\n\n      return {\n        onStart: props => {\n          component = document.createElement('richer-text-custom-suggestion-list');\n          component.items = props.items;\n          component.command = props.command;\n\n          if (!props.clientRect) {\n            return;\n          }\n          popup = tippy('body', {\n            getReferenceClientRect: props.clientRect,\n            appendTo: () => document.body,\n            content: component,\n            showOnCreate: true,\n            interactive: true,\n            trigger: 'manual',\n            placement: 'bottom-start',\n          });\n        },\n\n        onUpdate(props) {\n          component.items = props.items;\n          component.command = props.command;\n          if (!props.clientRect) {\n            return\n          }\n\n          popup[0].setProps({\n            getReferenceClientRect: props.clientRect,\n          })\n        },\n\n        onKeyDown(props) {\n          if (props.event.key === 'Escape') {\n            popup[0].hide()\n            return true\n          }\n          return component.onKeyDown(props)\n        },\n\n        onExit() {\n          popup[0].destroy();\n        },\n      }\n    },\n\n  }\n}\n\nexport default CustomSuggestionSuggestion;\n"],
  "mappings": ";AAAA,SAAS,iBAAiB;AAC1B,OAAO,WAAW;AAGlB,IAAM,6BAA6B,CAAC,cAAc,SAAS,cAAc;AACvE,SAAO;AAAA,IACL,MAAM;AAAA,IACN,WAAW,IAAI,UAAU,SAAS;AAAA,IAClC,OAAO,OAAO,EAAE,MAAM,MAAM;AAC1B,UAAI,CAAC,cAAc;AACjB,eAAO,CAAC;AAAA,MACV;AAEA,YAAM,MAAM,IAAI,IAAI,cAAc,OAAO,SAAS,MAAM;AAExD,UAAI,OAAO;AACT,YAAI,aAAa,IAAI,SAAS,KAAK;AAAA,MACrC;AAEA,YAAM,WAAW,MAAM,MAAM,GAAG;AAChC,YAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,aAAO,KACJ,OAAO,CAAC,SAAS;AAChB,eACE,KAAK,MAAM,YAAY,EAAE,SAAS,MAAM,YAAY,CAAC;AAAA,MAEzD,CAAC,EACA,MAAM,GAAG,EAAE;AAAA,IAChB;AAAA,IAEA,QAAQ,MAAM;AACZ,UAAI;AACJ,UAAI;AAEJ,aAAO;AAAA,QACL,SAAS,WAAS;AAChB,sBAAY,SAAS,cAAc,oCAAoC;AACvE,oBAAU,QAAQ,MAAM;AACxB,oBAAU,UAAU,MAAM;AAE1B,cAAI,CAAC,MAAM,YAAY;AACrB;AAAA,UACF;AACA,kBAAQ,MAAM,QAAQ;AAAA,YACpB,wBAAwB,MAAM;AAAA,YAC9B,UAAU,MAAM,SAAS;AAAA,YACzB,SAAS;AAAA,YACT,cAAc;AAAA,YACd,aAAa;AAAA,YACb,SAAS;AAAA,YACT,WAAW;AAAA,UACb,CAAC;AAAA,QACH;AAAA,QAEA,SAAS,OAAO;AACd,oBAAU,QAAQ,MAAM;AACxB,oBAAU,UAAU,MAAM;AAC1B,cAAI,CAAC,MAAM,YAAY;AACrB;AAAA,UACF;AAEA,gBAAM,CAAC,EAAE,SAAS;AAAA,YAChB,wBAAwB,MAAM;AAAA,UAChC,CAAC;AAAA,QACH;AAAA,QAEA,UAAU,OAAO;AACf,cAAI,MAAM,MAAM,QAAQ,UAAU;AAChC,kBAAM,CAAC,EAAE,KAAK;AACd,mBAAO;AAAA,UACT;AACA,iBAAO,UAAU,UAAU,KAAK;AAAA,QAClC;AAAA,QAEA,SAAS;AACP,gBAAM,CAAC,EAAE,QAAQ;AAAA,QACnB;AAAA,MACF;AAAA,IACF;AAAA,EAEF;AACF;AAEA,IAAO,qCAAQ;",
  "names": []
}
