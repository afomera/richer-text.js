{
  "version": 3,
  "sources": ["../../../node_modules/@tiptap/extension-mention/src/mention.ts", "../../../src/editor/extensions/Mention.js"],
  "sourcesContent": ["import { mergeAttributes, Node } from '@tiptap/core'\nimport { DOMOutputSpec, Node as ProseMirrorNode } from '@tiptap/pm/model'\nimport { PluginKey } from '@tiptap/pm/state'\nimport Suggestion, { SuggestionOptions } from '@tiptap/suggestion'\n\nexport type MentionOptions = {\n  HTMLAttributes: Record<string, any>\n  /** @deprecated use renderText and renderHTML instead  */\n  renderLabel?: (props: { options: MentionOptions; node: ProseMirrorNode }) => string\n  renderText: (props: { options: MentionOptions; node: ProseMirrorNode }) => string\n  renderHTML: (props: { options: MentionOptions; node: ProseMirrorNode }) => DOMOutputSpec\n  deleteTriggerWithBackspace: boolean\n  suggestion: Omit<SuggestionOptions, 'editor'>\n}\n\nexport const MentionPluginKey = new PluginKey('mention')\n\nexport const Mention = Node.create<MentionOptions>({\n  name: 'mention',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      renderText({ options, node }) {\n        return `${options.suggestion.char}${node.attrs.label ?? node.attrs.id}`\n      },\n      deleteTriggerWithBackspace: false,\n      renderHTML({ options, node }) {\n        return [\n          'span',\n          mergeAttributes(this.HTMLAttributes, options.HTMLAttributes),\n          `${options.suggestion.char}${node.attrs.label ?? node.attrs.id}`,\n        ]\n      },\n      suggestion: {\n        char: '@',\n        pluginKey: MentionPluginKey,\n        command: ({ editor, range, props }) => {\n          // increase range.to by one when the next node is of type \"text\"\n          // and starts with a space character\n          const nodeAfter = editor.view.state.selection.$to.nodeAfter\n          const overrideSpace = nodeAfter?.text?.startsWith(' ')\n\n          if (overrideSpace) {\n            range.to += 1\n          }\n\n          editor\n            .chain()\n            .focus()\n            .insertContentAt(range, [\n              {\n                type: this.name,\n                attrs: props,\n              },\n              {\n                type: 'text',\n                text: ' ',\n              },\n            ])\n            .run()\n\n          window.getSelection()?.collapseToEnd()\n        },\n        allow: ({ state, range }) => {\n          const $from = state.doc.resolve(range.from)\n          const type = state.schema.nodes[this.name]\n          const allow = !!$from.parent.type.contentMatch.matchType(type)\n\n          return allow\n        },\n      },\n    }\n  },\n\n  group: 'inline',\n\n  inline: true,\n\n  selectable: false,\n\n  atom: true,\n\n  addAttributes() {\n    return {\n      id: {\n        default: null,\n        parseHTML: element => element.getAttribute('data-id'),\n        renderHTML: attributes => {\n          if (!attributes.id) {\n            return {}\n          }\n\n          return {\n            'data-id': attributes.id,\n          }\n        },\n      },\n\n      label: {\n        default: null,\n        parseHTML: element => element.getAttribute('data-label'),\n        renderHTML: attributes => {\n          if (!attributes.label) {\n            return {}\n          }\n\n          return {\n            'data-label': attributes.label,\n          }\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: `span[data-type=\"${this.name}\"]`,\n      },\n    ]\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    if (this.options.renderLabel !== undefined) {\n      console.warn('renderLabel is deprecated use renderText and renderHTML instead')\n      return [\n        'span',\n        mergeAttributes({ 'data-type': this.name }, this.options.HTMLAttributes, HTMLAttributes),\n        this.options.renderLabel({\n          options: this.options,\n          node,\n        }),\n      ]\n    }\n    const mergedOptions = { ...this.options }\n\n    mergedOptions.HTMLAttributes = mergeAttributes({ 'data-type': this.name }, this.options.HTMLAttributes, HTMLAttributes)\n    const html = this.options.renderHTML({\n      options: mergedOptions,\n      node,\n    })\n\n    if (typeof html === 'string') {\n      return [\n        'span',\n        mergeAttributes({ 'data-type': this.name }, this.options.HTMLAttributes, HTMLAttributes),\n        html,\n      ]\n    }\n    return html\n  },\n\n  renderText({ node }) {\n    if (this.options.renderLabel !== undefined) {\n      console.warn('renderLabel is deprecated use renderText and renderHTML instead')\n      return this.options.renderLabel({\n        options: this.options,\n        node,\n      })\n    }\n    return this.options.renderText({\n      options: this.options,\n      node,\n    })\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Backspace: () => this.editor.commands.command(({ tr, state }) => {\n        let isMention = false\n        const { selection } = state\n        const { empty, anchor } = selection\n\n        if (!empty) {\n          return false\n        }\n\n        state.doc.nodesBetween(anchor - 1, anchor, (node, pos) => {\n          if (node.type.name === this.name) {\n            isMention = true\n            tr.insertText(\n              this.options.deleteTriggerWithBackspace ? '' : this.options.suggestion.char || '',\n              pos,\n              pos + node.nodeSize,\n            )\n\n            return false\n          }\n        })\n\n        return isMention\n      }),\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      Suggestion({\n        editor: this.editor,\n        ...this.options.suggestion,\n      }),\n    ]\n  },\n})\n", "import { mergeAttributes } from \"@tiptap/core\";\nimport Mention from \"@tiptap/extension-mention\";\n\nexport default Mention.extend({\n  name: \"mention\",\n  selectable: true,\n\n  addAttributes() {\n    return {\n      ...this.parent?.(),\n      avatarUrl: {\n        default: null,\n        parseHTML: element => element.getAttribute('data-avatar-url'),\n        renderHTML: attrs => {\n          if (!attrs.avatarUrl) {\n            return {}\n          }\n\n          return {\n            'data-avatar-url': attrs.avatarUrl,\n          }\n        },\n      },\n    };\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const label = [\"span\", { class: \"richer-text--mention-label\" }, node.attrs.label]\n    const avatar = [\"img\", { class: \"richer-text--mention-img\", src: node.attrs.avatarUrl, alt: node.attrs.label }]\n\n    return [\n      \"span\",\n      mergeAttributes({ 'data-type': this.name }, this.options.HTMLAttributes, HTMLAttributes),\n      avatar,\n      label\n    ];\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
