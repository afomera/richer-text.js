{
  "version": 3,
  "sources": ["../../../node_modules/@tiptap/extension-text-style/src/text-style.ts", "../../../src/editor/extensions/FontSize.js"],
  "sourcesContent": ["import {\n  getMarkAttributes,\n  Mark,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface TextStyleOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textStyle: {\n      /**\n       * Remove spans without inline style attributes.\n       */\n      removeEmptyTextStyle: () => ReturnType,\n    }\n  }\n}\n\nexport const TextStyle = Mark.create<TextStyleOptions>({\n  name: 'textStyle',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'span',\n        getAttrs: element => {\n          const hasStyles = (element as HTMLElement).hasAttribute('style')\n\n          if (!hasStyles) {\n            return false\n          }\n\n          return {}\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({ state, commands }) => {\n        const attributes = getMarkAttributes(state, this.type)\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value)\n\n        if (hasStyles) {\n          return true\n        }\n\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n})\n", "import \"@tiptap/extension-text-style\";\nimport { Extension } from \"@tiptap/core\";\n\nexport default Extension.create({\n  name: \"fontSize\",\n\n  addOptions() {\n    return {\n      types: ['textStyle'],\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          fontSize: {\n            default: null,\n            parseHTML: element => element.style.fontSize?.replace(/['\"]+/g, ''),\n            renderHTML: attributes => {\n              if (!attributes.fontSize) {\n                return {}\n              }\n\n              return {\n                style: `font-size: ${attributes.fontSize}`,\n              }\n            }\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setFontSize: fontSize => ({ chain }) => {\n        return chain().setMark('textStyle', { fontSize }).run()\n      },\n      unsetFontSize: () => ({ chain }) => {\n        return chain().setMark('textStyle', { fontSize: null }).removeEmptyTextStyle().run()\n      }\n    }\n  }\n});\n"],
  "mappings": ";;;;;;;;AAqBa,IAAA,YAAY,KAAK,OAAyB;EACrD,MAAM;EAEN,aAAU;AACR,WAAO;MACL,gBAAgB,CAAA;;;EAIpB,YAAS;AACP,WAAO;MACL;QACE,KAAK;QACL,UAAU,aAAU;AAClB,gBAAM,YAAa,QAAwB,aAAa,OAAO;AAE/D,cAAI,CAAC,WAAW;AACd,mBAAO;UACR;AAED,iBAAO,CAAA;;MAEV;;;EAIL,WAAW,EAAE,eAAc,GAAE;AAC3B,WAAO,CAAC,QAAQ,gBAAgB,KAAK,QAAQ,gBAAgB,cAAc,GAAG,CAAC;;EAGjF,cAAW;AACT,WAAO;MACL,sBAAsB,MAAM,CAAC,EAAE,OAAO,SAAQ,MAAM;AAClD,cAAM,aAAa,kBAAkB,OAAO,KAAK,IAAI;AACrD,cAAM,YAAY,OAAO,QAAQ,UAAU,EAAE,KAAK,CAAC,CAAA,EAAG,KAAK,MAAM,CAAC,CAAC,KAAK;AAExE,YAAI,WAAW;AACb,iBAAO;QACR;AAED,eAAO,SAAS,UAAU,KAAK,IAAI;;;;AAK1C,CAAA;;;AC/DD,IAAO,mBAAQ,UAAU,OAAO;AAAA,EAC9B,MAAM;AAAA,EAEN,aAAa;AACX,WAAO;AAAA,MACL,OAAO,CAAC,WAAW;AAAA,IACrB;AAAA,EACF;AAAA,EAEA,sBAAsB;AACpB,WAAO;AAAA,MACL;AAAA,QACE,OAAO,KAAK,QAAQ;AAAA,QACpB,YAAY;AAAA,UACV,UAAU;AAAA,YACR,SAAS;AAAA,YACT,WAAW,aAAW,QAAQ,MAAM,UAAU,QAAQ,UAAU,EAAE;AAAA,YAClE,YAAY,gBAAc;AACxB,kBAAI,CAAC,WAAW,UAAU;AACxB,uBAAO,CAAC;AAAA,cACV;AAEA,qBAAO;AAAA,gBACL,OAAO,cAAc,WAAW,QAAQ;AAAA,cAC1C;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,cAAc;AACZ,WAAO;AAAA,MACL,aAAa,cAAY,CAAC,EAAE,MAAM,MAAM;AACtC,eAAO,MAAM,EAAE,QAAQ,aAAa,EAAE,SAAS,CAAC,EAAE,IAAI;AAAA,MACxD;AAAA,MACA,eAAe,MAAM,CAAC,EAAE,MAAM,MAAM;AAClC,eAAO,MAAM,EAAE,QAAQ,aAAa,EAAE,UAAU,KAAK,CAAC,EAAE,qBAAqB,EAAE,IAAI;AAAA,MACrF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
